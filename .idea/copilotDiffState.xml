<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/infrastructure/repositories/animal.repository.impl.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/infrastructure/repositories/animal.repository.impl.ts" />
              <option name="originalContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { Observable, of } from 'rxjs';&#10;import { map, catchError } from 'rxjs/operators';&#10;import { AnimalRepository } from '../../domain/repositories/animal.repository';&#10;import {&#10;  Animal, &#10;  CreateAnimalRequest,&#10;  CreateAnimalApiRequest,&#10;  Vaccination,&#10;  Stable &#10;} from '../../shared/models/animal.model';&#10;import { API_ENDPOINTS } from '../../shared/config/api-endpoints.config';&#10;&#10;@Injectable({&#10;  providedIn: 'root'&#10;})&#10;export class AnimalRepositoryImpl extends AnimalRepository {&#10;&#10;  constructor(private http: HttpClient) {&#10;    super();&#10;  }&#10;&#10;  getAnimals(): Observable&lt;Animal[]&gt; {&#10;    console.log(' Fetching bovines from:', API_ENDPOINTS.ANIMALS.LIST);&#10;    return this.http.get&lt;any[]&gt;(API_ENDPOINTS.ANIMALS.LIST).pipe(&#10;      map(apiAnimals =&gt; {&#10;        console.log('✅ Bovines received:', apiAnimals);&#10;        return apiAnimals.map(apiAnimal =&gt; this.mapApiAnimalToAnimal(apiAnimal));&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching bovines:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  getAnimalById(id: number): Observable&lt;Animal&gt; {&#10;    const url = API_ENDPOINTS.ANIMALS.DETAIL(id.toString());&#10;    console.log(' Fetching bovine by ID from:', url);&#10;&#10;    return this.http.get&lt;any&gt;(url).pipe(&#10;      map(apiAnimal =&gt; {&#10;        console.log('✅ Bovine received:', apiAnimal);&#10;        return this.mapApiAnimalToAnimal(apiAnimal);&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  createAnimal(request: CreateAnimalRequest): Observable&lt;Animal&gt; {&#10;    console.log(' Creating new bovine:', request);&#10;&#10;    // Create FormData for multipart/form-data request&#10;    const formData = new FormData();&#10;    formData.append('Name', request.name);&#10;    formData.append('Gender', request.gender);&#10;    formData.append('BirthDate', request.birthDate.toISOString());&#10;    formData.append('Breed', request.breed);&#10;    formData.append('Location', request.location);&#10;    formData.append('StableId', request.stableId.toString());&#10;&#10;    // Add image file if provided&#10;    if (request.imageFile) {&#10;      formData.append('BovineImg', request.imageFile, request.imageFile.name);&#10;    }&#10;&#10;    console.log(' Sending FormData with:', {&#10;      Name: request.name,&#10;      Gender: request.gender,&#10;      BirthDate: request.birthDate.toISOString(),&#10;      Breed: request.breed,&#10;      Location: request.location,&#10;      StableId: request.stableId,&#10;      hasImage: !!request.imageFile&#10;    });&#10;&#10;    return this.http.post&lt;any&gt;(API_ENDPOINTS.ANIMALS.CREATE, formData).pipe(&#10;      map(response =&gt; {&#10;        console.log('✅ Bovine created:', response);&#10;        return this.mapApiAnimalToAnimal(response);&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error creating bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  updateAnimal(id: number, updates: Partial&lt;Animal&gt;): Observable&lt;Animal&gt; {&#10;    const url = API_ENDPOINTS.ANIMALS.UPDATE(id.toString());&#10;    console.log(' Updating bovine:', id, updates);&#10;&#10;    const formData = new FormData();&#10;    &#10;    if (updates.name) formData.append('Name', updates.name);&#10;    if (updates.gender) formData.append('Gender', updates.gender);&#10;    if (updates.breed) formData.append('Breed', updates.breed);&#10;    if (updates.location) formData.append('Location', updates.location);&#10;    if (updates.stableId) formData.append('StableId', updates.stableId.toString());&#10;&#10;    return this.http.put&lt;any&gt;(url, formData).pipe(&#10;      map(apiAnimal =&gt; {&#10;        console.log('✅ Bovine updated:', apiAnimal);&#10;        return this.mapApiAnimalToAnimal(apiAnimal);&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error updating bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  deleteAnimal(id: number): Observable&lt;void&gt; {&#10;    const url = API_ENDPOINTS.ANIMALS.DELETE(id.toString());&#10;    console.log('️ Deleting bovine:', id);&#10;&#10;    return this.http.delete&lt;void&gt;(url).pipe(&#10;      map(() =&gt; {&#10;        console.log('✅ Bovine deleted successfully');&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error deleting bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  // Additional API methods&#10;  getAnimalsByStable(stableId: number): Observable&lt;Animal[]&gt; {&#10;    const url = API_ENDPOINTS.STABLES.LIST + `/${stableId}/animals`;&#10;    console.log(' Fetching animals by stable from:', url);&#10;&#10;    return this.http.get&lt;Animal[]&gt;(url).pipe(&#10;      map(apiAnimals =&gt; {&#10;        console.log('✅ Animals by stable received:', apiAnimals);&#10;        return apiAnimals.map(apiAnimal =&gt; this.mapApiAnimalToAnimal(apiAnimal));&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching animals by stable:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  getVaccinations(animalId: number): Observable&lt;Vaccination[]&gt; {&#10;    const url = API_ENDPOINTS.VACCINES.LIST + `/animal/${animalId}`;&#10;    console.log(' Fetching vaccinations from:', url);&#10;&#10;    return this.http.get&lt;Vaccination[]&gt;(url).pipe(&#10;      map(vaccinations =&gt; {&#10;        console.log('✅ Vaccinations received:', vaccinations);&#10;        return vaccinations;&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching vaccinations:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  getStables(): Observable&lt;Stable[]&gt; {&#10;    console.log(' Fetching stables from:', API_ENDPOINTS.STABLES.LIST);&#10;&#10;    return this.http.get&lt;Stable[]&gt;(API_ENDPOINTS.STABLES.LIST).pipe(&#10;      map(stables =&gt; {&#10;        console.log('✅ Stables received:', stables);&#10;        return stables;&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching stables:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  private mapApiAnimalToAnimal(apiAnimal: any): Animal {&#10;    return {&#10;      id: apiAnimal.id,&#10;      name: apiAnimal.name,&#10;      breed: apiAnimal.breed,&#10;      gender: apiAnimal.gender,&#10;      location: apiAnimal.location,&#10;      birthDate: apiAnimal.birthDate, // Keep as ISO string&#10;      bovineImg: apiAnimal.bovineImg,&#10;      stableId: apiAnimal.stableId,&#10;&#10;      // For component compatibility&#10;      birthdate: new Date(apiAnimal.birthDate),&#10;      imageUrl: apiAnimal.bovineImg || '',&#10;      weight: 500, // Default weight&#10;      campaign: 'General', // Default campaign&#10;      barn: 'Establo General', // Default barn&#10;      age: this.calculateAge(apiAnimal.birthDate),&#10;      createdAt: new Date()&#10;    };&#10;  }&#10;&#10;  private calculateAge(birthDate: string): number {&#10;    const today = new Date();&#10;    const birth = new Date(birthDate);&#10;    let age = today.getFullYear() - birth.getFullYear();&#10;    const monthDiff = today.getMonth() - birth.getMonth();&#10;&#10;    if (monthDiff &lt; 0 || (monthDiff === 0 &amp;&amp; today.getDate() &lt; birth.getDate())) {&#10;      age--;&#10;    }&#10;&#10;    return Math.max(0, age);&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { Observable, of } from 'rxjs';&#10;import { map, catchError } from 'rxjs/operators';&#10;import { AnimalRepository } from '../../domain/repositories/animal.repository';&#10;import {&#10;  Animal, &#10;  CreateAnimalRequest,&#10;  CreateAnimalApiRequest,&#10;  Vaccination,&#10;  Stable &#10;} from '../../shared/models/animal.model';&#10;import { API_ENDPOINTS } from '../../shared/config/api-endpoints.config';&#10;&#10;@Injectable({&#10;  providedIn: 'root'&#10;})&#10;export class AnimalRepositoryImpl extends AnimalRepository {&#10;&#10;  constructor(private http: HttpClient) {&#10;    super();&#10;  }&#10;&#10;  getAnimals(): Observable&lt;Animal[]&gt; {&#10;    console.log(' Fetching bovines from:', API_ENDPOINTS.ANIMALS.LIST);&#10;    return this.http.get&lt;any[]&gt;(API_ENDPOINTS.ANIMALS.LIST).pipe(&#10;      map(apiAnimals =&gt; {&#10;        console.log('✅ Bovines received:', apiAnimals);&#10;        return apiAnimals.map(apiAnimal =&gt; this.mapApiAnimalToAnimal(apiAnimal));&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching bovines:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  getAnimalById(id: number): Observable&lt;Animal&gt; {&#10;    const url = API_ENDPOINTS.ANIMALS.DETAIL(id.toString());&#10;    console.log(' Fetching bovine by ID from:', url);&#10;&#10;    return this.http.get&lt;any&gt;(url).pipe(&#10;      map(apiAnimal =&gt; {&#10;        console.log('✅ Bovine received:', apiAnimal);&#10;        return this.mapApiAnimalToAnimal(apiAnimal);&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  createAnimal(request: CreateAnimalRequest): Observable&lt;Animal&gt; {&#10;    console.log(' Creating new bovine:', request);&#10;&#10;    // Create FormData for multipart/form-data request&#10;    const formData = new FormData();&#10;    formData.append('Name', request.name);&#10;    formData.append('Gender', request.gender);&#10;    formData.append('BirthDate', request.birthDate.toISOString());&#10;    formData.append('Breed', request.breed);&#10;    formData.append('Location', request.location);&#10;    formData.append('StableId', request.stableId.toString());&#10;&#10;    // Add image file if provided - backend expects 'FileData' field&#10;    if (request.imageFile) {&#10;      formData.append('FileData', request.imageFile, request.imageFile.name);&#10;    }&#10;&#10;    console.log(' Sending FormData with:', {&#10;      Name: request.name,&#10;      Gender: request.gender,&#10;      BirthDate: request.birthDate.toISOString(),&#10;      Breed: request.breed,&#10;      Location: request.location,&#10;      StableId: request.stableId,&#10;      hasImage: !!request.imageFile,&#10;      fileName: request.imageFile?.name&#10;    });&#10;&#10;    return this.http.post&lt;any&gt;(API_ENDPOINTS.ANIMALS.CREATE, formData).pipe(&#10;      map(response =&gt; {&#10;        console.log('✅ Bovine created:', response);&#10;        return this.mapApiAnimalToAnimal(response);&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error creating bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  updateAnimal(id: number, updates: Partial&lt;Animal&gt;): Observable&lt;Animal&gt; {&#10;    const url = API_ENDPOINTS.ANIMALS.UPDATE(id.toString());&#10;    console.log(' Updating bovine:', id, updates);&#10;&#10;    const formData = new FormData();&#10;    &#10;    if (updates.name) formData.append('Name', updates.name);&#10;    if (updates.gender) formData.append('Gender', updates.gender);&#10;    if (updates.breed) formData.append('Breed', updates.breed);&#10;    if (updates.location) formData.append('Location', updates.location);&#10;    if (updates.stableId) formData.append('StableId', updates.stableId.toString());&#10;&#10;    return this.http.put&lt;any&gt;(url, formData).pipe(&#10;      map(apiAnimal =&gt; {&#10;        console.log('✅ Bovine updated:', apiAnimal);&#10;        return this.mapApiAnimalToAnimal(apiAnimal);&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error updating bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  deleteAnimal(id: number): Observable&lt;void&gt; {&#10;    const url = API_ENDPOINTS.ANIMALS.DELETE(id.toString());&#10;    console.log('️ Deleting bovine:', id);&#10;&#10;    return this.http.delete&lt;void&gt;(url).pipe(&#10;      map(() =&gt; {&#10;        console.log('✅ Bovine deleted successfully');&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error deleting bovine:', error);&#10;        throw error;&#10;      })&#10;    );&#10;  }&#10;&#10;  // Additional API methods&#10;  getAnimalsByStable(stableId: number): Observable&lt;Animal[]&gt; {&#10;    const url = API_ENDPOINTS.STABLES.LIST + `/${stableId}/animals`;&#10;    console.log(' Fetching animals by stable from:', url);&#10;&#10;    return this.http.get&lt;Animal[]&gt;(url).pipe(&#10;      map(apiAnimals =&gt; {&#10;        console.log('✅ Animals by stable received:', apiAnimals);&#10;        return apiAnimals.map(apiAnimal =&gt; this.mapApiAnimalToAnimal(apiAnimal));&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching animals by stable:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  getVaccinations(animalId: number): Observable&lt;Vaccination[]&gt; {&#10;    const url = API_ENDPOINTS.VACCINES.LIST + `/animal/${animalId}`;&#10;    console.log(' Fetching vaccinations from:', url);&#10;&#10;    return this.http.get&lt;Vaccination[]&gt;(url).pipe(&#10;      map(vaccinations =&gt; {&#10;        console.log('✅ Vaccinations received:', vaccinations);&#10;        return vaccinations;&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching vaccinations:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  getStables(): Observable&lt;Stable[]&gt; {&#10;    console.log(' Fetching stables from:', API_ENDPOINTS.STABLES.LIST);&#10;&#10;    return this.http.get&lt;Stable[]&gt;(API_ENDPOINTS.STABLES.LIST).pipe(&#10;      map(stables =&gt; {&#10;        console.log('✅ Stables received:', stables);&#10;        return stables;&#10;      }),&#10;      catchError(error =&gt; {&#10;        console.error('❌ Error fetching stables:', error);&#10;        return of([]);&#10;      })&#10;    );&#10;  }&#10;&#10;  private mapApiAnimalToAnimal(apiAnimal: any): Animal {&#10;    return {&#10;      id: apiAnimal.id,&#10;      name: apiAnimal.name,&#10;      breed: apiAnimal.breed,&#10;      gender: apiAnimal.gender,&#10;      location: apiAnimal.location,&#10;      birthDate: apiAnimal.birthDate, // Keep as ISO string&#10;      bovineImg: apiAnimal.bovineImg,&#10;      stableId: apiAnimal.stableId,&#10;&#10;      // For component compatibility&#10;      birthdate: new Date(apiAnimal.birthDate),&#10;      imageUrl: apiAnimal.bovineImg || '',&#10;      weight: 500, // Default weight&#10;      campaign: 'General', // Default campaign&#10;      barn: 'Establo General', // Default barn&#10;      age: this.calculateAge(apiAnimal.birthDate),&#10;      createdAt: new Date()&#10;    };&#10;  }&#10;&#10;  private calculateAge(birthDate: string): number {&#10;    const today = new Date();&#10;    const birth = new Date(birthDate);&#10;    let age = today.getFullYear() - birth.getFullYear();&#10;    const monthDiff = today.getMonth() - birth.getMonth();&#10;&#10;    if (monthDiff &lt; 0 || (monthDiff === 0 &amp;&amp; today.getDate() &lt; birth.getDate())) {&#10;      age--;&#10;    }&#10;&#10;    return Math.max(0, age);&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>